import { useState, useEffect } from 'react'; interface Todo { id: number; text: string; completed: boolean; } type Filter = 'all' | 'active' | 'completed'; export default function App() { const [todos, setTodos] = useState<Todo[]>(() => { const saved = localStorage.getItem('todos'); return saved ? JSON.parse(saved) : []; }); const [input, setInput] = useState(''); const [filter, setFilter] = useState<Filter>('all'); const [editId, setEditId] = useState<number | null>(null); const [editText, setEditText] = useState(''); useEffect(() => { localStorage.setItem('todos', JSON.stringify(todos)); }, [todos]); const addTodo = (e: React.FormEvent) => { e.preventDefault(); if (input.trim()) { setTodos([...todos, { id: Date.now(), text: input.trim(), completed: false }]); setInput(''); } }; const toggleTodo = (id: number) => { setTodos(todos.map(t => t.id === id ? { ...t, completed: !t.completed } : t)); }; const deleteTodo = (id: number) => { setTodos(todos.filter(t => t.id !== id)); }; const startEdit = (id: number, text: string) => { setEditId(id); setEditText(text); }; const saveEdit = () => { if (editText.trim()) { setTodos(todos.map(t => t.id === editId ? { ...t, text: editText.trim() } : t)); setEditId(null); setEditText(''); } }; const cancelEdit = () => { setEditId(null); setEditText(''); }; const clearCompleted = () => { setTodos(todos.filter(t => !t.completed)); }; const filteredTodos = todos.filter(t => { if (filter === 'active') return !t.completed; if (filter === 'completed') return t.completed; return true; }); const activeCount = todos.filter(t => !t.completed).length; return ( <div className="app"> <div className="container"> <h1 className="title">📝 Todo List</h1> <form onSubmit={addTodo} className="input-form"> <input type="text" value={input} onChange={(e) => setInput(e.target.value)} placeholder="What needs to be done?" className="todo-input" /> <button type="submit" className="add-btn">Add</button> </form> {todos.length > 0 && ( <> <div className="todo-list"> {filteredTodos.map(todo => ( <div key={todo.id} className={`todo-item ${todo.completed ? 'completed' : ''}`}> {editId === todo.id ? ( <div className="edit-form"> <input type="text" value={editText} onChange={(e) => setEditText(e.target.value)} className="edit-input" autoFocus onKeyDown={(e) => { if (e.key === 'Enter') saveEdit(); if (e.key === 'Escape') cancelEdit(); }} /> <button onClick={saveEdit} className="save-btn">✓</button> <button onClick={cancelEdit} className="cancel-btn">✕</button> </div> ) : ( <> <input type="checkbox" checked={todo.completed} onChange={() => toggleTodo(todo.id)} className="checkbox" /> <span className="todo-text" onDoubleClick={() => startEdit(todo.id, todo.text)}>{todo.text}</span> <button onClick={() => deleteTodo(todo.id)} className="delete-btn">🗑️</button> </> )} </div> ))} </div> <div className="footer"> <span className="count">{activeCount} {activeCount === 1 ? 'item' : 'items'} left</span> <div className="filters"> <button className={filter === 'all' ? 'active' : ''} onClick={() => setFilter('all')}>All</button> <button className={filter === 'active' ? 'active' : ''} onClick={() => setFilter('active')}>Active</button> <button className={filter === 'completed' ? 'active' : ''} onClick={() => setFilter('completed')}>Completed</button> </div> {todos.some(t => t.completed) && ( <button onClick={clearCompleted} className="clear-btn">Clear completed</button> )} </div> </> )} </div> </div> ); }